# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    cache_adapter: cache.adapter.filesystem
    articles_uploads: 'uploads/articles'
    articles_uploads_url: '/%articles_uploads%'
    articles_uploads_dir: '%kernel.project_dir%/public/%articles_uploads%'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            $debug: '%kernel.debug%'
            Demontpx\ParsedownBundle\Parsedown: '@App\Service\Parsedown'
            $markWithBold: '%env(bool:MARK_ARTICLE_WORDS_WITH_BOLD)%'

            League\Flysystem\Filesystem $articleFileSystem: '@oneup_flysystem.uploads_articles_filesystem'

#    App\Service\FileUploader $articleFileUploader: '@file_uploader.article'
#    App\Service\FileUploader $avatarFileUploader: '@file_uploader.avatar'
#            $slackUrl: '%env(SLACK_WEBHOOK_URL)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
#    file_uploader.avatar:
#        class: App\Service\FileUploader
#        arguments:
#            $uploadsPath: '%articles_uploads_dir%'
#    file_uploader.article:
#        class: App\Service\FileUploader
#        arguments:
#            $uploadsPath: '%articles_uploads_dir%'
    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
